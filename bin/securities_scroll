#!/usr/bin/python

import sys
import timeit
import termios
import tty
import select
import os
import requests
import json
import time
from threading import Thread, Lock

from columnar import columnar
from click import style

stocksFile = '/home/jp/.local/share/securities/following.json'

# read stocks file
with open(stocksFile, 'r') as stockFile:
    stocks = json.loads(stockFile.read())

finish = False
currentStart = 0

finishLock = Lock()
currentStartLock = Lock()

total_symbols = len(stocks)
stocks_per_screen = total_symbols

colWidth = 16

sleepTime = 0.3

redraw = True
redrawLock = Lock()

rows, columns = os.popen('stty size', 'r').read().split()

if total_symbols * colWidth > int(columns):
    stocks_per_screen = int(int(columns) / colWidth) - 1


def shouldRedraw():
    should_we = False
    redrawLock.acquire()
    should_we = redraw
    redrawLock.release()
    return should_we


def redrawIt():
    global redraw
    redrawLock.acquire()
    redraw = True
    redrawLock.release()


def doneRedraw():
    global redraw
    redrawLock.acquire()
    redraw = False
    redrawLock.release()


def finishIt():
    global finish
    finishLock.acquire()
    finish = True
    finishLock.release()


def we_done():
    are_we = False
    finishLock.acquire()
    are_we = finish
    finishLock.release()
    return are_we


def start():
    global currentStart
    currentStartLock.acquire()
    currentStart = 0
    currentStartLock.release()
    redrawIt()


def nextPage():
    global currentStart
    currentStartLock.acquire()
    currentStart += 1
    if currentStart > total_symbols - stocks_per_screen:
        currentStart = 0
    currentStartLock.release()
    redrawIt()


def prevPage():
    global currentStart
    currentStartLock.acquire()
    currentStart -= 1
    if currentStart < 0:
        currentStart = 0
    currentStartLock.release()
    redrawIt()


def isThereNext():
    is_there = False
    currentStartLock.acquire()
    is_there = currentStart + stocks_per_screen < total_symbols
    currentStartLock.release()
    return is_there


def isTherePrev():
    is_there = False
    currentStartLock.acquire()
    is_there = currentStart > 0
    currentStartLock.release()
    return is_there


def isLess(who):
    is_it = False
    currentStartLock.acquire()
    is_it = who < currentStart
    currentStartLock.release()
    return is_it


class InputThread(Thread):

    def __init__(self):
        Thread.__init__(self)

    def isData(self):
        return select.select([sys.stdin], [], [], 0) == ([sys.stdin], [], [])

    def run(self):
        old_settings = termios.tcgetattr(sys.stdin)
        try:
            tty.setcbreak(sys.stdin.fileno())

            while True:
                if self.isData():
                    ch = sys.stdin.read(1)
                else:
                    time.sleep(sleepTime)
                    continue

                if ch == 'q':
                    finishIt()
                    break
                if ch == 'j':
                    prevPage()
                    continue
                if ch == ';':
                    nextPage()
                    continue

        finally:
            termios.tcsetattr(sys.stdin, termios.TCSADRAIN, old_settings)


inputThread = InputThread()
inputThread.start()

os.system('clear')
print('...')

url = 'https://finnhub.io/api/v1/quote'
token = 'c4645diad3idgi81mmq0'

stockInfo = []

bold = "\033[1m"
reset = "\033[0m"

def remove_last_line_from_string(s):
    return s[:s.rfind('\n')]


def remove_first_line_from_string(s):
    return '\n'.join(s.split('\n')[1:])


def fetchSymbolData():
    stockInfo.clear()
    for stock in stocks:
        payload = {
            'token': token,
            'symbol': stock['symbol'] if stock['symbol'] != 'BTC_USD' else 'BTC',
        }

        response = requests.get(url, params=payload)
        stockInfo.append({
            "symbol": stock['symbol'],
            "data": response.json()
        })


os.system('setterm -cursor off')

last_update = time.time()
lastScroll = time.time()

fa_caret_down = "\ue19f"
fa_caret_up = "\ue1a0"
fa_caret_left = "\ue1a1"
fa_caret_right = "\ue1a2"
fa_refresh = "\ue0ff"

fetchSymbolData()

prevTable = ""

while not we_done():

    if time.time() - lastScroll > 10:
        nextPage()
        lastScroll = time.time()
        redrawIt()

    rows, columns = os.popen('stty size', 'r').read().split()

    if total_symbols * colWidth > int(columns):
        stocks_per_screen = int(int(columns) / colWidth) - 1
        
    if not shouldRedraw():
        time.sleep(sleepTime)
        continue

    symbols = [fa_caret_left if isTherePrev() else '']

    if isThereNext():
        current = symbols.pop()
        symbols.append(current + fa_caret_right)

    changes = ['DIF']
    highLow = ['H/L']
    openClose = ['OP/PC']

    currentOn = -1
    totalOnScreen = 0
    for stock in stockInfo:

        currentOn += 1

        if isLess(currentOn):
            continue

        change = stock['data']['d']
        changePercent = stock['data']['dp']
        current = stock['data']['c']
        high = stock['data']['h']
        low = stock['data']['l']
        openPrice = stock['data']['o']
        previousClose = stock['data']['pc']

        symbols.append(bold + str(stock['symbol']) + reset)
        if change < 0:
            symbols.append(fa_caret_down + " " + str(current))
            changes.extend([
                str(change * -1),
                str(changePercent * -1) + "%"
            ])
        else:
            symbols.append(fa_caret_up + " " + str(current))
            changes.extend([
                str(change),
                str(changePercent) + "%"
            ])

        highLow.extend([
            str(high),
            str(low)
        ])

        openClose.extend([
            str(openPrice),
            str(previousClose)
        ])

        totalOnScreen += 1
       
        if totalOnScreen == stocks_per_screen:
            break

    table = columnar(
        data=[symbols, changes, highLow, openClose],
        no_borders=True,
        wrap_max=0,
        max_column_width=int(colWidth / 2),
        patterns=[
            (fa_caret_down + '.+', lambda text: style(text, fg='red')),
            (fa_caret_up + '.+', lambda text: style(text, fg='green')),
        ]
    )

    if table != prevTable:
        os.system('clear')
        print(remove_first_line_from_string(
            remove_last_line_from_string(table)
        ), end='')
        prevTable = table

    doneRedraw()

    if time.time() - last_update > 30:
        sys.stdout.write(fa_refresh)
        sys.stdout.flush()
        fetchSymbolData()
        sys.stdout.write("\b \b")
        sys.stdout.flush()
        redrawIt()
        last_update = time.time()



os.system('setterm -cursor on')
